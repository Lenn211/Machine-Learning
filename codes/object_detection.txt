import os
import json
import requests
import cv2
import random
import numpy as np
from google.colab import userdata
import shutil
from google.colab import files

API_URL = "https://api-inference.huggingface.co/models/facebook/detr-resnet-50"
API_TOKEN = userdata.get("API_TOKEN")

# Define output folder
OUTPUT_FOLDER = "Object_detection"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

def query(file_path, api_url, api_token):
    """Send an image to the Hugging Face API and return the detected objects."""
    headers = {"Authorization": f"Bearer {api_token}"}
    with open(file_path, "rb") as f:
        data = f.read()
    response = requests.request("POST", api_url, headers=headers, data=data)
    try:
        return json.loads(response.content.decode("utf-8"))
    except json.JSONDecodeError:
        print(f"Error decoding JSON for {file_path}")
        return []

def get_random_color():
    """Generate a random color."""
    return tuple(random.randint(0, 255) for _ in range(3))

def draw_rect(file_path, api_url, api_token, output_folder):
    """Draw bounding boxes around detected objects and add a legend below the image."""
    img = cv2.imread(file_path)
    data = query(file_path, api_url, api_token)

    if not data:
        print(f"No objects detected in {file_path}")
        return

    object_colors = {}
    labeled_objects = {}

    for d in data:
        label = d["label"]
        if label not in object_colors:
            object_colors[label] = get_random_color()
        color = object_colors[label]
        cv2.rectangle(img, (d['box']['xmin'], d['box']['ymin']),
                      (d['box']['xmax'], d['box']['ymax']), color, 3)

        # Only label one instance of each object
        if label not in labeled_objects:
            cv2.putText(img, label, (d['box']['xmin'], d['box']['ymin'] - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2, cv2.LINE_AA)  # Black text in Arial
            labeled_objects[label] = True

    # Create white space for legend below the image
    legend_height = 50
    new_img = np.ones((img.shape[0] + legend_height, img.shape[1], 3), dtype=np.uint8) * 255
    new_img[:img.shape[0], :] = img

    # Create legend below the image with dynamically spaced items
    legend_x, legend_y = 10, img.shape[0] + 30
    total_labels = len(object_colors)
    if total_labels > 0:
        spacing = img.shape[1] // total_labels  # Distribute labels evenly across the width
    else:
        spacing = 100  # Default spacing

    for i, (label, color) in enumerate(object_colors.items()):
        x_position = legend_x + i * spacing
        cv2.rectangle(new_img, (x_position, legend_y - 10), (x_position + 20, legend_y + 10), color, -1)
        cv2.putText(new_img, label, (x_position + 30, legend_y), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 1, cv2.LINE_AA)  # Black text in Arial

    output_path = os.path.join(output_folder, os.path.basename(file_path))
    cv2.imwrite(output_path, new_img)
    print(f"Processed image saved: {output_path}")

def process_folder(input_folder, api_url, api_token, output_folder):
    """Process all images in a given folder."""
    for file_name in os.listdir(input_folder):
        if file_name.lower().endswith(('jpg', 'jpeg', 'png')):
            file_path = os.path.join(input_folder, file_name)
            draw_rect(file_path, api_url, api_token, output_folder)

# Define input folder
INPUT_FOLDER = "1"  # Change this to your actual folder path

# Run the processing
process_folder(INPUT_FOLDER, API_URL, API_TOKEN, OUTPUT_FOLDER)

shutil.make_archive("Object_detection", 'zip', OUTPUT_FOLDER)

# Provide a download link
from IPython.display import FileLink
print("Click the link below to download the processed images:")
files.download("Object_detection.zip")