import os
import json
import requests
import cv2
import numpy as np
from google.colab import userdata
import shutil
from google.colab import files

API_URL = "https://api-inference.huggingface.co/models/google/vit-base-patch16-224"
API_TOKEN = userdata.get('API_TOKEN')

if not API_TOKEN:
    raise ValueError("API_TOKEN is missing. Please set it in Google Colab.")

OUTPUT_FOLDER = "processed_images"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

def query(file_path, api_url, api_token):
    """Send an image to the Hugging Face API and return the result."""
    headers = {"Authorization": f"Bearer {api_token}"}
    with open(file_path, "rb") as f:
        data = f.read()
    try:
        response = requests.post(api_url, headers=headers, data=data)
        response.raise_for_status()  # Raise error if status code is not 200
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error with request for {file_path}: {e}")
    except json.JSONDecodeError:
        print(f"Error decoding JSON for {file_path}")
    return []

def wrap_text(text, max_length=28):
    """Wrap text to fit within a certain width."""
    words = text.split()
    lines = []
    current_line = ""
    for word in words:
        if len(current_line) + len(word) + 1 <= max_length:
            current_line += (" " if current_line else "") + word
        else:
            lines.append(current_line)
            current_line = word
    if current_line:
        lines.append(current_line)
    return lines

def process_image(file_path, api_url, api_token, output_folder):
    """Process an image, add text results on a white sidebar, and save it."""
    img = cv2.imread(file_path)
    if img is None:
        print(f"Error: Cannot read {file_path}")
        return

    data = query(file_path, api_url, api_token)
    if not data:
        print(f"No data received for {file_path}")
        return

    height, width, _ = img.shape
    sidebar_width = int(width * 0.4)
    new_img = np.ones((height, width + sidebar_width, 3), dtype=np.uint8) * 255
    new_img[:, :width] = img

    text_x, text_y = width + 10, 30
    for item in data:
        label = item.get("label", "Unknown")
        score = item.get("score", 0.0)

        wrapped_label = wrap_text(label)
        text_offset = 0
        for line in wrapped_label:
            cv2.putText(new_img, line, (text_x, text_y + text_offset),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2, cv2.LINE_AA)
            text_offset += 30

        cv2.putText(new_img, f"{score:.2f}", (text_x, text_y + text_offset),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2, cv2.LINE_AA)
        text_y += text_offset + 50

    output_path = os.path.join(output_folder, os.path.basename(file_path))
    cv2.imwrite(output_path, new_img)
    print(f"Processed image saved: {output_path}")

def process_folder(input_folder, api_url, api_token, output_folder):
    """Process all images in a given folder."""
    if not os.path.exists(input_folder):
        raise FileNotFoundError(f"Input folder '{Input_folder}' not found.")

    for file_name in os.listdir(input_folder):
        if file_name.lower().endswith(('jpg', 'jpeg', 'png')):
            file_path = os.path.join(input_folder, file_name)
            process_image(file_path, api_url, api_token, output_folder)

INPUT_FOLDER = "1"  # Change this to your actual folder path

process_folder(INPUT_FOLDER, API_URL, API_TOKEN, OUTPUT_FOLDER)

shutil.make_archive("processed_images", 'zip', OUTPUT_FOLDER)

# Provide a download link
from IPython.display import FileLink
print("Click the link below to download the processed images:")
files.download("processed_images.zip")